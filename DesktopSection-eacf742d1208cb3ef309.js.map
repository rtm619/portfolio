{"version":3,"sources":["webpack:///./src/components/Section/styles/DesktopSection.twstyle.js","webpack:///./src/components/Section/DesktopSection.js","webpack:///./src/components/Media/Image.js","webpack:///./src/components/Card/styles/FrameworkCard.twstyle.js","webpack:///./src/components/SVG/Triangle.js","webpack:///./src/components/Card/FrameworkCard.js"],"names":["DesktopSection","title","titleClassName","content","Typography","component","className","body","styles","map","item","FrameworkCard","key","Image","src","alt","getImageUrl","defaultProps","Triangle","style","xmlns","viewBox","points","shortDescription","image","link","useState","isVisible","setVisible","domRef","useRef","useEffect","window","innerWidth","process","currentRef","current","observer","IntersectionObserver","entries","entry","isIntersecting","observe","unobserve","ref","classnames","file","url","Button","href","text","height","width"],"mappings":"yLAAe,EACG,8BC2BHA,UArBQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,eAAgBC,EAA1B,EAA0BA,QAA1B,OACrB,oCACGF,GACD,kBAACG,EAAA,EAAD,CAAYC,UAAWJ,EAAMI,UAAWC,UAAWJ,GAChDD,EAAMM,MAAQN,EAAMM,KAAKA,MAG5B,yBAAKD,UAAWE,GACbL,GAAWA,EAAQM,KAAI,SAACC,GAAD,OACtB,kBAACC,EAAA,EAAD,eAAeC,IAAKF,EAAKT,OAAWS,W,6FCXtCG,EAAQ,SAAC,GAAD,IAAGP,EAAH,EAAGA,UAAWQ,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,IAAnB,OACZ,yBAAKT,UAAWA,EAAWQ,IAAKE,YAAYF,GAAMC,IAAKA,KASzDF,EAAMI,aAAe,CACnBX,UAAW,IAGEO,QCnBA,EACJ,+EADI,EAEN,8CAFM,EAGG,sDAHH,EAIN,4DAJM,EAKK,6EALL,EAMP,6EANO,EAOH,gEAPG,EAQH,iD,wBCLNK,EAAW,SAAC,GAAD,IAAGZ,EAAH,EAAGA,UAAWa,EAAd,EAAcA,MAAd,OACf,yBAAKb,UAAWA,EAAWa,MAAOA,EAAOC,MAAM,6BAA6BC,QAAQ,eAClF,6BAASC,OAAO,4BASpBJ,EAASD,aAAe,CACtBX,UAAW,oCACXa,MAAO,IAGMD,QC0CAP,IAnDO,SAAC,GAEhB,IADLV,EACI,EADJA,MAAOsB,EACH,EADGA,iBAAkBC,EACrB,EADqBA,MAAOC,EAC5B,EAD4BA,KAC5B,EAC4BC,oBAAS,GAAlCC,EADH,KACcC,EADd,KAEEC,EAASC,mBAajB,OAZEC,qBAAU,WACR,GAAIC,OAAOC,YAAcC,MAAsC,CAC7D,IAAMC,EAAaN,EAAOO,QACpBC,EAAW,IAAIC,sBAAqB,SAACC,GACzC,IAAMC,EAAQD,EAAQ,GACtBX,EAAWY,EAAMC,mBAGnB,OADAJ,EAASK,QAAQP,GACV,kBAAME,EAASM,UAAUR,IAElC,OAAO,kBAAM,QACZ,IAEH,yBAAKS,IAAKf,EAAQvB,UAAWuC,YAAWrC,EAAgBmB,EAAY,mBAAqB,KACtFH,GACC,kBAAC,EAAD,CAAOlB,UAAWE,EAAcM,IAAKU,EAAMsB,MAAQtB,EAAMsB,KAAKC,IAAKhC,IAAKS,EAAMvB,QAEhF,yBAAKK,UAAWE,GACbP,GACC,kBAACG,EAAA,EAAD,CAAYC,UAAU,MAAMC,UAAWE,GACpCP,GAGJsB,GACC,kBAACnB,EAAA,EAAD,CAAYC,UAAU,IAAIC,UAAWE,GAClCe,EAAiBA,kBAGrBE,GACC,kBAACuB,EAAA,EAAD,CAAQ3C,UAAU,IAAI4C,KAAMxB,EAAKA,MAAQA,EAAKA,KAAKsB,IAAK9C,MAAOwB,EAAKxB,MAAOK,UAAWE,GACpF,0BAAMF,UAAWE,GAAkBiB,EAAKyB,MACxC,kBAAC,EAAD,CAAU/B,MAAO,CAAEgC,OAAQ,OAAQC,MAAO,QAAU9C,UAAWE","file":"DesktopSection-eacf742d1208cb3ef309.js","sourcesContent":["export default {\r\n  contentWrapper: 'w-full flex flex-wrap my-50',\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Typography from '../Typography/Typography';\r\nimport FrameworkCard from '../Card/FrameworkCard';\r\nimport styles from './styles/DesktopSection.twstyle';\r\n\r\nconst DesktopSection = ({ title, titleClassName, content }) => (\r\n  <>\r\n    {title && (\r\n    <Typography component={title.component} className={titleClassName}>\r\n      {title.body && title.body.body}\r\n    </Typography>\r\n      )}\r\n    <div className={styles.contentWrapper}>\r\n      {content && content.map((item) => (\r\n        <FrameworkCard key={item.title} {...item} />\r\n        ))}\r\n    </div>\r\n  </>\r\n  );\r\n\r\nDesktopSection.propTypes = {\r\n  title: PropTypes.object,\r\n  titleClassName: PropTypes.string,\r\n  content: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default DesktopSection;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { getImageUrl } from '../../helpers/cloudinary.helper';\r\n\r\nconst Image = ({ className, src, alt }) => (\r\n  <img className={className} src={getImageUrl(src)} alt={alt} />\r\n  );\r\n\r\nImage.propTypes = {\r\n  className: PropTypes.string,\r\n  src: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired,\r\n};\r\n\r\nImage.defaultProps = {\r\n  className: '',\r\n};\r\n\r\nexport default Image;\r\n","export default {\r\n  wrapper: 'frameworkcard-wrapper w-full relative md:w-1/3 p-20 mdl:p-30 mb-20 mdl:mb-30',\r\n  image: 'frameworkcard-image mx-auto mdl:w-3/5 w-2/3',\r\n  contentWrapper: 'frameworkcard-content mt-10 mdl:mt-30 mdl:opacity-0',\r\n  title: 'text-white font-SpartanBold mdl:text-18 text-center mb-10',\r\n  shortDescription: 'text-white px-10 font-SpartanRegular text-12 mdl:text-14 text-center mb-15',\r\n  link: 'frameworkcard-button mx-auto flex mdl:w-1/3 w-1/2 relative hover:bg-orange',\r\n  linkText: 'text-white font-SpartanMedium text-14 w-full text-center py-5',\r\n  linkIcon: 'text-transparent fill-current absolute right-0',\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Triangle = ({ className, style }) => (\r\n  <svg className={className} style={style} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 500 500\">\r\n    <polygon points=\"250,0 500,250 250,500\" />\r\n  </svg>\r\n);\r\n\r\nTriangle.propTypes = {\r\n  className: PropTypes.string,\r\n  style: PropTypes.object,\r\n};\r\n\r\nTriangle.defaultProps = {\r\n  className: 'fill-current text-black w-24 h-24',\r\n  style: {},\r\n};\r\n\r\nexport default Triangle;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport classnames from '../../helpers/classnames.helper';\r\nimport Image from '../Media/Image';\r\nimport styles from './styles/FrameworkCard.twstyle';\r\nimport Typography from '../Typography/Typography';\r\nimport Button from '../Button/Button';\r\nimport Triangle from '../SVG/Triangle';\r\n\r\nconst FrameworkCard = ({\r\n  title, shortDescription, image, link,\r\n}) => {\r\n  const [isVisible, setVisible] = useState(true);\r\n  const domRef = useRef();\r\n  useEffect(() => {\r\n    if (window.innerWidth >= process.env.GATSBY_MOBILE_BREAKPOINT) {\r\n      const currentRef = domRef.current;\r\n      const observer = new IntersectionObserver((entries) => {\r\n        const entry = entries[0];\r\n        setVisible(entry.isIntersecting);\r\n      });\r\n      observer.observe(currentRef);\r\n      return () => observer.unobserve(currentRef);\r\n    }\r\n    return () => null;\r\n  }, []);\r\nreturn (\r\n  <div ref={domRef} className={classnames(styles.wrapper, isVisible ? 'in-viewport-fade' : '')}>\r\n    {image && (\r\n      <Image className={styles.image} src={image.file && image.file.url} alt={image.title} />\r\n    )}\r\n    <div className={styles.contentWrapper}>\r\n      {title && (\r\n        <Typography component=\"div\" className={styles.title}>\r\n          {title}\r\n        </Typography>\r\n      )}\r\n      {shortDescription && (\r\n        <Typography component=\"p\" className={styles.shortDescription}>\r\n          {shortDescription.shortDescription}\r\n        </Typography>\r\n      )}\r\n      {link && (\r\n        <Button component=\"a\" href={link.link && link.link.url} title={link.title} className={styles.link}>\r\n          <span className={styles.linkText}>{link.text}</span>\r\n          <Triangle style={{ height: '31px', width: '31px' }} className={styles.linkIcon} />\r\n        </Button>\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\n};\r\n\r\nFrameworkCard.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  shortDescription: PropTypes.object.isRequired,\r\n  image: PropTypes.object.isRequired,\r\n  link: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default FrameworkCard;\r\n"],"sourceRoot":""}